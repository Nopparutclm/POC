"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePan = void 0;
var react_1 = require("react");
var usePan = function (cb, deps) {
    var _a = (0, react_1.useState)([0, 0]), lastPosition = _a[0], savePosition = _a[1];
    var _b = (0, react_1.useState)(false), isPanning = _b[0], setPanState = _b[1];
    var onMouseDown = (0, react_1.useCallback)(function (ev) {
        if (ev.button !== 0) {
            return;
        }
        savePosition([ev.screenX, ev.screenY]);
        setPanState(true);
    }, [setPanState, savePosition]);
    var onTouchStart = (0, react_1.useCallback)(function (ev) {
        var touch = ev.touches[0];
        savePosition([touch.screenX, touch.screenY]);
        setPanState(true);
    }, [setPanState, savePosition]);
    var move = (0, react_1.useCallback)(function (p) {
        if (!isPanning) {
            return;
        }
        savePosition(function (prev) {
            cb([p[0] - prev[0], p[1] - prev[1]]);
            return p;
        });
    }, __spreadArray([savePosition, isPanning], deps, true));
    var onMouseMove = (0, react_1.useCallback)(function (ev) {
        var screenX = ev.screenX, screenY = ev.screenY;
        move([screenX, screenY]);
    }, [move]);
    var onTouchMove = (0, react_1.useCallback)(function (ev) {
        var _a = ev.touches[0], screenX = _a.screenX, screenY = _a.screenY;
        move([screenX, screenY]);
    }, __spreadArray([savePosition, isPanning], deps, true));
    var clear = (0, react_1.useCallback)(function () {
        savePosition([0, 0]);
        setPanState(false);
    }, [setPanState, savePosition]);
    return {
        onMouseDown: onMouseDown,
        onMouseMove: onMouseMove,
        onMouseUp: clear,
        onMouseLeave: clear,
        onTouchStart: onTouchStart,
        onTouchMove: onTouchMove,
        onTouchCancel: clear,
        onTouchEnd: clear,
    };
};
exports.usePan = usePan;
