"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sketch = exports.v1UrlParser = void 0;
var components_1 = require("@storybook/components");
var theming_1 = require("@storybook/theming");
var react_1 = require("react");
var IFrame_1 = require("./IFrame");
var v1UrlParser = function (url) {
    if (url.protocol !== "https:") {
        return {
            valid: false,
            error: ((0, theming_1.jsx)(react_1.Fragment, null,
                "Expected HTTPS link, received ",
                (0, theming_1.jsx)("code", null, url.protocol),
                ".")),
        };
    }
    if (url.hostname !== "www.sketch.com") {
        return {
            valid: false,
            error: ((0, theming_1.jsx)(react_1.Fragment, null,
                "Expected a hostname ",
                (0, theming_1.jsx)("code", null, "www.sketch.com"),
                ", received",
                " ",
                (0, theming_1.jsx)("code", null, url.hostname))),
        };
    }
    var malformedUrlErrorMessage = ((0, theming_1.jsx)(react_1.Fragment, null,
        "Expected pathname ",
        (0, theming_1.jsx)("code", null, "/s/<string>/a/<string>"),
        ", received",
        " ",
        (0, theming_1.jsx)("code", null, url.pathname),
        "."));
    var pathSegments = url.pathname.split("/").slice(1);
    if (pathSegments.length < 4) {
        return {
            valid: false,
            error: malformedUrlErrorMessage,
        };
    }
    if (pathSegments[0] === "embed") {
        return {
            valid: true,
            data: {
                url: url.href,
                offscreen: false,
            },
        };
    }
    var s = pathSegments[0], sid = pathSegments[1], a = pathSegments[2], aid = pathSegments[3];
    if (s !== "s" || !sid || a !== "a" || !aid) {
        return {
            valid: false,
            error: malformedUrlErrorMessage,
        };
    }
    return {
        valid: true,
        data: {
            url: "https://www.sketch.com/embed/s/".concat(sid, "/a/").concat(aid),
            offscreen: false,
        },
    };
};
exports.v1UrlParser = v1UrlParser;
var Sketch = function (_a) {
    var config = _a.config;
    var result = (0, react_1.useMemo)(function () {
        var parsed = (0, exports.v1UrlParser)(new URL(config.url));
        if (!parsed.valid) {
            return parsed;
        }
        return __assign(__assign({}, parsed), { data: __assign(__assign({}, config), parsed.data) });
    }, [config]);
    if (!result.valid) {
        return ((0, theming_1.jsx)(components_1.Placeholder, null,
            (0, theming_1.jsx)(react_1.Fragment, null, "Invalid Sketch URL"),
            (0, theming_1.jsx)(react_1.Fragment, null, result.error)));
    }
    return (0, theming_1.jsx)(IFrame_1.IFrame, { defer: true, config: result.data });
};
exports.Sketch = Sketch;
